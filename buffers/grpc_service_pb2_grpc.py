# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from . import grpc_service_pb2 as grpc__service__pb2

GRPC_GENERATED_VERSION = "1.66.0"
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower

    _version_not_supported = first_version_is_lower(
        GRPC_VERSION, GRPC_GENERATED_VERSION
    )
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f"The grpc package installed is at version {GRPC_VERSION},"
        + f" but the generated code in grpc_service_pb2_grpc.py depends on"
        + f" grpcio>={GRPC_GENERATED_VERSION}."
        + f" Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}"
        + f" or downgrade your generated code using grpcio-tools<={GRPC_VERSION}."
    )


class RunnerServiceStub(object):
    """분산 학습 서비스 정의"""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Act = channel.unary_unary(
            "/pytorch_ppo_seed_rl.RunnerService/Act",
            request_serializer=grpc__service__pb2.ActRequest.SerializeToString,
            response_deserializer=grpc__service__pb2.ActResponse.FromString,
            _registered_method=True,
        )
        self.Report = channel.unary_unary(
            "/pytorch_ppo_seed_rl.RunnerService/Report",
            request_serializer=grpc__service__pb2.ReportRequest.SerializeToString,
            response_deserializer=grpc__service__pb2.Empty.FromString,
            _registered_method=True,
        )


class RunnerServiceServicer(object):
    """분산 학습 서비스 정의"""

    def Act(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def Report(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_RunnerServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "Act": grpc.unary_unary_rpc_method_handler(
            servicer.Act,
            request_deserializer=grpc__service__pb2.ActRequest.FromString,
            response_serializer=grpc__service__pb2.ActResponse.SerializeToString,
        ),
        "Report": grpc.unary_unary_rpc_method_handler(
            servicer.Report,
            request_deserializer=grpc__service__pb2.ReportRequest.FromString,
            response_serializer=grpc__service__pb2.Empty.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "pytorch_ppo_seed_rl.RunnerService", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers(
        "pytorch_ppo_seed_rl.RunnerService", rpc_method_handlers
    )


# This class is part of an EXPERIMENTAL API.
class RunnerService(object):
    """분산 학습 서비스 정의"""

    @staticmethod
    def Act(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/pytorch_ppo_seed_rl.RunnerService/Act",
            grpc__service__pb2.ActRequest.SerializeToString,
            grpc__service__pb2.ActResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def Report(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/pytorch_ppo_seed_rl.RunnerService/Report",
            grpc__service__pb2.ReportRequest.SerializeToString,
            grpc__service__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )
